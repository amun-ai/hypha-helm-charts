apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "tritoninferenceserver.fullname" . }}
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    app: {{ template "tritoninferenceserver.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
  selector:
    matchLabels:
      app: {{ template "tritoninferenceserver.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "tritoninferenceserver.name" . }}
        release: {{ .Release.Name }}
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
        {{- end }}
    spec:
      securityContext:
        # fsGroup: 1000
        runAsUser: 0
        # TOO SLOW 
      # initContainers:
      #   - name: model-mount-s3
      #     image: efrecon/s3fs
      #     command: ["/bin/sh", "-c"]
      #     args:
      #     - >
      #       mkdir -p {{ .Values.image.modelRepositoryPath }};
      #       s3fs {{ .Values.image.s3Bucket }} {{ .Values.image.modelRepositoryPath }} -o url={{ .Values.image.s3Endpoint }} -o use_path_request_style -o nonempty -o public_bucket=1;
      #       chmod -R g+rw {{ .Values.image.modelRepositoryPath }}
      #     securityContext:
      #       runAsUser: 0
      #     volumeMounts:
      #     - mountPath: {{ .Values.image.modelRepositoryPath }}
      #       name: model-repository
      containers:
        - name: tritoninferenceserver
          image: {{ .Values.image.imageName }}
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
            - mountPath: {{ .Values.image.modelRepositoryPath }}
              name: model-repository
            - mountPath:  {{ .Values.image.modelSnapshotsPath }}
              name: model-snapshots
          env:
          - name: TF_FORCE_GPU_ALLOW_GROWTH
            value: "true"
          - name: MODEL_SNAPSHOTS_DIRECTORY
            value: "{{ .Values.image.modelSnapshotsPath }}"
          imagePullPolicy: IfNotPresent
        #   TODO Fix probe checks
        #   livenessProbe:
        #     httpGet:
        #       path: /v2/health/live
        #       port: http
        #   readinessProbe:
        #     initialDelaySeconds: 500
        #     periodSeconds: 5
        #     httpGet:
        #       path: /v2/health/ready
        #       port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
          command: ["/bin/sh"]
          args:
            - -c
            - >-
              apt update -yq &&
              apt install libgl1-mesa-glx -y &&
              tritonserver --model-store={{ .Values.image.modelStore }} --log-verbose=1 --model-control-mode=poll --repository-poll-secs=60 --exit-on-error=false --strict-model-config=false --model-repository={{ .Values.image.modelRepository}}
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
          # lifecycle:
          #   postStart:
          #     exec:
          #       command:
          #         - >
          #           /bin/sh -c apt update -yq && apt install libgl1-mesa-glx -y
                # command:
                  #  - |
                    # bash -c "apt update -yq && apt install libgl1-mesa-glx -y"
        # livenessProbe:
        #     exec:
        #         command:
        #         - ["CMD", "curl", "-f", "http://localhost:8000/v2/health/live"]
        #     initialDelaySeconds: 30
        #     periodSeconds: 20

      volumes:
        - name: dshm
          emptyDir:
              medium: Memory
        - name: model-repository
          emptyDir: {}
        - name: model-snapshots
          emptyDir: {}