# version: v3.4.0

# context defines the context of this Desired State File.
# It is used to allow Helmsman identify which releases are managed by which DSF.
# Therefore, it is important that each DSF uses a unique context.
context: denbi # defaults to "production" if not provided

# metadata -- add as many key/value pairs as you want
metadata:
  maintainer: "imjoy-team(imjoy.team@gmail.com)"
  description: "Desired State File for ImJoy App Engine K8s deploy"

# paths to the certificate for connecting to the cluster
# You can skip this if you use Helmsman on a machine with kubectl already connected to your k8s cluster.
# you have to use exact key names here : 'caCrt' for certificate and 'caKey' for the key and caClient for the client certificate
# certificates:
#caClient: "gs://mybucket/client.crt" # GCS bucket path
#caCrt: "s3://mybucket/ca.crt" # S3 bucket path
#caKey: "../ca.key" # valid local file relative path

helmRepos:
  daskgateway: "https://dask.org/dask-gateway-helm-repo/"
  jetstack: "https://charts.jetstack.io"
  nginx-stable: "https://helm.nginx.com/stable"
  ingress-nginx: "https://kubernetes.github.io/ingress-nginx"
  # trow: "https://trow.io"
  twuni: "https://helm.twun.io"
  nvidia-triton: "https://helm.ngc.nvidia.com/nvidia"
  triton: "https://ctr26.github.io/tritoninferenceserver/"
  prometheus-community: "https://prometheus-community.github.io/helm-charts"
  nvdp: "https://nvidia.github.io/k8s-device-plugin"
  nvidia: "https://nvidia.github.io/gpu-operator"
  minio-operator: "https://operator.min.io/"
  minio: "https://charts.min.io/"

  # imjoy: https://github.com/imjoy-team/imjoy-app-engine/charts

settings:
  # kubeContext: "minikube" # will try connect to this context first, if it does not exist, it will be created using the details below
  #username: "admin"
  #password: "$K8S_PASSWORD" # the name of an environment variable containing the k8s password
  #clusterURI: "$SET_URI" # the name of an environment variable containing the cluster API
  #clusterURI: "https://192.168.99.100:8443" # equivalent to the above
  #storageBackend: "secret"
  #slackWebhook:  "$slack" # or your slack webhook url
  #reverseDelete: false # reverse the priorities on delete
  #### to use bearer token:
  #  bearerToken: true
  #  clusterURI: "https://kubernetes.default"
  # globalHooks:
  #   successCondition: "Initialized"
  #   deleteOnSuccess: true
  #   postInstall: "job.yaml"
  # globalMaxHistory: 5

# define your environments and their k8s namespaces


# define any private/public helm charts repos you would like to get charts from
# syntax: repo_name: "repo_url"
# only private repos hosted in s3 buckets are now supported
# helmRepos:
  # jetstack: "https://charts.jetstack.io"
  # t83714: "https://t83714.github.io/docker-registry-mirror"
# define the desired state of your applications helm charts
# each contains the following:

apps:
  # cert-manager:
  #   namespace: "cert-manager" # maps to the namespace as defined in namespaces above
  #   enabled: true # change to false if you want to delete this app release empty: false:
  #   chart: "jetstack/cert-manager" # changing the chart name means delete and recreate this chart
  #   version: "v1.3.1" # chart version
  #   ### Optional values below
  #   valuesFile: "" # leaving it empty uses the default chart values
  #   test: false
  #   # protected: false
  #   priority: -3
  #   wait: true
  #   hooks:
  #     successCondition: "Complete"
  #     successTimeout: "90s"
  #     deleteOnSuccess: true
  #     # preInstall: "https://github.com/jetstack/cert-manager/releases/download/v0.14.0/cert-manager.crds.yaml"
  #   set:
  #     "installCRDs": true

  cert-manager:
    name: "cert-manager"
    chart: "jetstack/cert-manager"
    enabled: false
    priority: 0
    # timeout: 120
    version: "v1.4.2"
    wait: true
    group: "production"
    namespace: "cert-manager"
    set:
      installCRDs: true
      ingressShim.defaultIssuerKind: "ClusterIssuer"
      ingressShim.defaultIssuerName: "letsencrypt-production"
    hooks:
      postUpgrade: "cert-managment/cluster_issuer/values.yaml"
      postInstall: "cert-managment/cluster_issuer/values.yaml"

  # docker-registry:
  #   name: "docker-registry"
  #   namespace: "docker-registry"
  #   chart: "twuni/docker-registry"
  #   group: "production"
  #   enabled: true
  #   version: "1.11.0"
  #   set:
  #     proxy:enabled: true
  #     proxy.username: "$CI_REGISTRY_USER"
  #     proxy.password: "$CI_REGISTRY_PASSWORD"
  #   valuesFiles:
  #     - docker-registry/values.yaml 

  imjoy-app-engine:
    namespace: "imjoy-app-engine" # maps to the namespace as defined in namespaces above
    enabled: false # change to false if you want to delete this app release empty: false:
    chart: "imjoy-app-engine/imjoy-app-engine" # changing the chart name means delete and recreate this chart
    version: "0.1.0" # chart version
    group: "production"
    # protected: false
    ### Optional values below
    # valuesFile: ""
    # test: false
    # priority: -2
    # noHooks: false
    # timeout: 300
    # maxHistory: 4
    # additional helm flags for this release
    # helmFlags:
    #   - "--devel"

  tritoninferenceserver:
    name: "tritoninferenceserver"
    namespace: "tritoninferenceserver"
    chart: "triton/tritoninferenceserver"
    # chart: "nvidia-triton/tritoninferenceserver"
    group: "production"
    enabled: false
    version: "1.0.1"
    valuesFiles:
      - tritoninferenceserver/values.yaml

  nvidia-device-plugin:
    name: "nvidia-device-plugin"
    namespace: "nvidia-device-plugin"
    chart: "nvdp/nvidia-device-plugin"
    enabled: false
    version: "0.10.0"
    group: "production"

  nvidia-gpu-operator:
    name: "nvidia-gpu-operator"
    namespace: "nvidia-gpu-operator"
    chart: "nvidia/gpu-operator"
    enabled: false
    version: "1.8.2"
    group: "production"

  ingress-nginx:
    name: "ingress-nginx"
    namespace: "ingress-nginx"
    chart: "ingress-nginx/ingress-nginx"
    group: "production"
    enabled: false
    version: "3.35.0"
    valuesFiles:
      - ingress/nginx-ingress.yaml

  # minio:
  #   name: "minio"
  #   namespace: "minio"
  #   chart: "minio/minio"
  #   group: "production"
  #   # wait: true
  #   enabled: false
  #   timeout: 4800
  #   version: "3.3.0"
  #   valuesFiles:
  #       - minio/values.yaml
  #   set:
  #     rootUser: rootuser
  #     rootPassword: rootpass123
